import { app, BrowserWindow } from "electron";
import AutoLaunch from "auto-launch";
import { parseCommand } from "./AppCommand";
import { IntegrationModule } from "./IntegrationModule";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const autoLaunch = new AutoLaunch({
  name: 'erp-integration-client'
});
autoLaunch.isEnabled().then((isEnabled) => {
  if (!isEnabled) autoLaunch.enable();
});


// Auto update;
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('update-electron-app')()

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

function createWindow(): void {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
}

function run(filePath: string) {
  const { updateItemsUsecase } = IntegrationModule(filePath, app.getVersion());
  updateItemsUsecase.execute();
}

function main() {
  const args = process.argv;
  const command = parseCommand(args);
  if (command.type === "start") {
    if (command.options.openWindow) {
      createWindow();
    }
    run(command.options.filePath);
    const _2min = 1000 * 60 * 2;
    setInterval(() => {
      run(command.options.filePath);
    }, _2min);
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  main();
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
